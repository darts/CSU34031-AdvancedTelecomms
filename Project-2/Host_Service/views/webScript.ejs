<script>
    const rsa = new RSA()
    const crypt = new Crypt()
    const threadAddr = " https://localhost:3000/thread?thread="
    const homeAddr = " https://localhost:3000/home"
    const newThreadAddr = "https://localhost:3000/newThread"
    const newPostAddr = "https://localhost:3000/newPost"
    const userAddr = "https://localhost:3000/loginCreate"
    let userName, pubKey, privKey, pkList
    let curThread, threads
    let cryptoOnly = false

    let friends = ['darts', 'mic']


    rsa.generateKeyPair(function (keyPair) { pubKey = keyPair.publicKey; privKey = keyPair.privateKey; })


    let moveToThread = (threadID) => {
        fetch(threadAddr + threadID).then((res) => {
            return res.json()
        }).then(res => {
            console.log(res)
            document.body.innerHTML = res.html
            curThread = threadID

            if (cryptoOnly)
                filterSingleThread()
        }).catch(err => {
            console.log(err)
            // alert("Error connecting to server")
        })
    }

    let returnHome = () => {
        fetch(homeAddr).then((res) => {
            return res.json()
        }).then(res => {
            // console.log(res)
            document.body.innerHTML = res.html
            threads = res.tjson
            if (userName)
                document.getElementById('userlogin').innerText = `Logged in as: ${userName} `
            if (cryptoOnly)
                filterThreads()
        }).catch(err => {
            console.log(err)
            // alert("Error connecting to server")
        })
    }

    let genKeyList = (arr) => {
        return arr.map(e => pkList[e])
    }

    let postthread = () => {
        let text = document.getElementById('newthread-container').value
        let title = document.getElementById('newthread-title').value
        if (cryptoOnly) {
            text = `${crypt.encrypt(genKeyList(friends), text)}`
            title = `${crypt.encrypt(genKeyList(friends), title)}`

            // text = JSON.stringify(crypt.encrypt(pubKey, text))
            // title = JSON.stringify(crypt.encrypt(pubKey, title))
        }
        // console.log(JSON.stringify({ user: userName, title: title, content: text }))

        fetch(newThreadAddr, {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ user: userName, title: title, content: text, users: friends })
        }).then(res => {
            return res.json()
        }).then(res => {
            returnHome()
        })
    }

    let addPost = () => {
        let content = document.getElementById('newthreadPost').value
        if (cryptoOnly) {
            content = JSON.stringify(crypt.encrypt(genKeyList(threads[curThread]['users']), text))
        }
        fetch(newPostAddr, {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ user: userName, thread: curThread, 'content': content })
        }).then(res => {
            moveToThread(curThread)
        })
    }

    let login = () => {
        let usrname = document.getElementById('unm').value
        let pwd = document.getElementById('pwd').value
        let isNewUser = !!document.getElementById('newUser').checked

        fetch(userAddr, {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username: usrname, password: pwd, isNewUser: isNewUser, privKey: privKey, pubKey: pubKey })
        }).then(res => {
            return res.json()
        }).then(res => {
            privKey = res.privKey
            pubKey = res.pubKey
            userName = usrname
            // console.log(res)
            pkList = res.allPubs
            document.getElementById('popupbox').style.visibility = 'hidden'
            document.getElementById('userlogin').innerText = `Logged in as: ${userName} `
        })
    }

    let filterThreads = () => {
        threads.forEach((e, i) => {
            try {
                //TODO signatures
                let decrypt = crypt.decrypt(privKey, e.name)
                console.log(decrypt)

                document.getElementById(`head-${i}`).innerText = decrypt.message

            } catch (error) {
                console.log(error)
                document.getElementById(`head-${i}`).parentNode.parentNode.removeChild(document.getElementById(`head-${i}`).parentNode)
            }
        })
    }

    let filterSingleThread = () => {
        let decryptTitle = crypt.decrypt(privKey, document.getElementById('title').innerText.split('Thread Topic:')[1])
        document.getElementById('title').innerText = ` <b>Thread Topic:</b> ${decryptTitle.message}`

        let itList = document.getElementsByClassName('content')

        for (let e of itList) {
            try {
                let dec = crypt.decrypt(privKey, e.innerText)
                e.innerText = dec.message
            } catch (error) {
                e.parentNode.parentNode.removeChild(e.parentNode)
            }
        }
    }

    let convertToCrypto = () => {
        cryptoOnly = !cryptoOnly
        returnHome()
        if (cryptoOnly) {
            filterThreads()
        }
    }

    returnHome()
</script>
